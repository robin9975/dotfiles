" Tab control
set tabstop=4
set expandtab
set shiftwidth=4
set autoindent
set smartindent
set smarttab

" Numbering
set number relativenumber ruler

set splitright

set autoread
set history=1000

set updatetime=300
set signcolumn=yes


call plug#begin()

" Plug 'https://github.com/ctrlpvim/ctrlp.vim' " Ctrl-P

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.5' } " File finder / etc.
Plug 'https://github.com/neoclide/coc.nvim'  " Auto Completion, LSP related stuffs

Plug 'fannheyward/telescope-coc.nvim' " Use telescope to filter Coc results

Plug 'github/copilot.vim' " 

" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

Plug 'karb94/neoscroll.nvim' "Smooth scroll

Plug 'https://github.com/preservim/nerdtree' " NerdTree
Plug 'https://github.com/ap/vim-css-color' " CSS Color Preview
Plug 'https://github.com/ryanoasis/vim-devicons' " Developer Icons
Plug 'https://github.com/preservim/tagbar' " Tagbar for code navigation
Plug 'ayu-theme/ayu-vim'


set encoding=UTF-8

call plug#end()

colorscheme ayu
set termguicolors

source ~/.dotfiles/nvim/neoscroll.lua
source ~/.dotfiles/nvim/telescope.lua


let g:coc_disable_startup_warning = 1

set statusline="%t"

"
" Nerd
" Ignore stupid python files in NERDTree
"
let NERDTreeIgnore = ['\.pyc$', '\~$', '__pycache__$[[dir]]']
nmap <silent> <C-n> :NERDTreeToggle<CR>


" Autocommands
au BufNewFile,BufRead *.tex set linebreak spell spelllang=en
au BufNewFile,BufRead *.rs set filetype=rust



let b:coc_root_patterns = ['.git', '.env', 'package.json', 'tsconfig.json', 'jsconfig.json', 'vite.config.ts', 'vite.config.js', 'vue.config.js', 'nuxt.config.ts', 'Cargo.toml']

let g:coc_global_extensions = [ 'coc-rust-analyzer', 'coc-python', 'coc-json', '@yaegassy/coc-volar', 'coc-tsserver', 'coc-css'  ]


if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif



"
" Coc configs, based on the example config in
" https://github.com/neoclide/coc.nvim
"

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

